Question 1: 

Minimum time required to transfer information to the whole node in a tree from the given targeted node.
[Note: take 1 second to transfer information from one node to another  and each node takes same time,information will spread connected nodes only.] 

Input:
         15
         / \
       16    78
             /  \
          33      66
         /  \     / \
        31  14   92  29

target node = 33

Output: 3

   Code:  Only main part i have written main method i.e i have not created tree, only pass treenode and targetnode as argument in function.  
     
     
     class Solution{ 
void dfs(TreeNode root,HashMap<TreeNode,TreeNode> hs){        //store parent node in hashmap
        if(root==null)return;
        if(root.left!=null)
        {
            hs.put(root.left,root);
            dfs(root.left,hs);
        }
        if(root.right!=null)
        {
            hs.put(root.right,root);
            dfs(root.right,hs);
        }
    }
    public void TransferInformation(TreeNode root ,TreeNode target) {
         HashMap<TreeNode,TreeNode> hs=new HashMap<>();
        dfs(root,hs);
        Queue<TreeNode> q=new LinkedList<>();
        q.add(target);
        int t=-1;
        ArrayList<TreeNode> ar=new ArrayList<>();  //check node if alredy visit or not
        while(!q.isEmpty())
        {
            int l=q.size();
            t++;
            for(int i=0;i<l;i++)
            {
                TreeNode n=q.poll();
                if(n.left!=null && !ar.contains(n.left)){ar.add(n.left);q.add(n.left);}
                if(n.right!=null && !ar.contains(n.right)){ar.add(n.right);q.add(n.right);}
               if(hs.containsKey(n) && !ar.contains(hs.get(n)))
                {
                    ar.add(hs.get(n));
                    q.add(hs.get(n));
                }
            }
        }
        System.out.println(t);          //print the time
    }
}


